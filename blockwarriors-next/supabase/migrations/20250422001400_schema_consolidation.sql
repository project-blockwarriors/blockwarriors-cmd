-- Schema Refactoring: Consolidate duplicate tables and standardize structure
-- This migration drops duplicate tables and creates a consolidated schema without backward compatibility views

-- Step 1: Create new consolidated tables

-- Create tokens table
CREATE TABLE IF NOT EXISTS "public"."tokens" (
    "token_id" uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    "token" uuid DEFAULT extensions.uuid_generate_v4(),
    "user_id" uuid,
    "match_id" bigint,
    "game_team_id" bigint,
    "bot_id" integer,
    "created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()),
    "expires_at" timestamp with time zone DEFAULT (now() + '00:15:00'::interval),
    "is_active" boolean DEFAULT true
);

-- Create game_teams table (consolidating game_teams2)
CREATE TABLE IF NOT EXISTS "public"."game_teams" (
    "game_team_id" bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
    "bots" integer[] NOT NULL,
    "created_at" timestamp with time zone DEFAULT now()
);

-- Create consolidated matches table
CREATE TABLE IF NOT EXISTS "public"."matches_new" (
    "match_id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    "match_type" text DEFAULT 'standard',
    "match_status" text DEFAULT 'pending',
    "match_elo" integer,
    "winner_team_id" bigint,
    "blue_team_id" bigint,
    "red_team_id" bigint,
    "created_at" timestamp with time zone DEFAULT now(),
    "expires_at" timestamp with time zone DEFAULT (now() + '00:15:00'::interval),
    "mode" text DEFAULT ''
);

-- Step 2: Migrate data from old tables to new tables

-- Migrate data from active_tokens to the new tokens table
INSERT INTO "public"."tokens" (token, match_id, created_at, expires_at)
SELECT token, match_id, created_at, expires_at
FROM "public"."active_tokens";

-- Migrate data from active_tokens2 to the new tokens table
INSERT INTO "public"."tokens" (token, user_id, bot_id, match_id, game_team_id, created_at, expires_at)
SELECT token, user_id, bot_id, match_id, game_team_id, created_at, expires_at
FROM "public"."active_tokens2";

-- Migrate data from blockwarriors_tokens to the new tokens table
INSERT INTO "public"."tokens" (token_id, user_id, created_at)
SELECT id, user_id, created_at
FROM "public"."blockwarriors_tokens";

-- Migrate data from game_teams2 to the new game_teams table
INSERT INTO "public"."game_teams" (bots, created_at)
SELECT bots, created_at
FROM "public"."game_teams2";

-- Create a mapping table to handle ID references
CREATE TEMPORARY TABLE game_team_id_mapping AS
SELECT gt2.game_team_id as old_id, gt.game_team_id as new_id
FROM "public"."game_teams2" gt2
JOIN "public"."game_teams" gt 
ON gt2.bots = gt.bots AND gt2.created_at = gt.created_at;

-- Migrate data from matches to matches_new
INSERT INTO "public"."matches_new" (match_id, winner_team_id, match_elo, match_status, blue_team_id, red_team_id, mode)
SELECT 
    m.match_id, 
    m.winner_team_id, 
    m.match_elo, 
    CASE 
        WHEN m.match_status = 0 THEN 'pending'
        WHEN m.match_status = 1 THEN 'in_progress'
        WHEN m.match_status = 2 THEN 'completed'
        ELSE 'unknown'
    END,
    blue.new_id, 
    red.new_id,
    m.mode
FROM "public"."matches" m
LEFT JOIN game_team_id_mapping blue ON m.blue_team_id = blue.old_id
LEFT JOIN game_team_id_mapping red ON m.red_team_id = red.old_id;

-- Migrate data from matches2 to matches_new
INSERT INTO "public"."matches_new" (match_id, match_type, match_status, blue_team_id, red_team_id, created_at, expires_at)
SELECT 
    m2.match_id, 
    m2.match_type, 
    m2.match_status, 
    blue.new_id, 
    red.new_id,
    m2.created_at,
    m2.expires_at
FROM "public"."matches2" m2
LEFT JOIN game_team_id_mapping blue ON m2.blue_team_id = blue.old_id
LEFT JOIN game_team_id_mapping red ON m2.red_team_id = red.old_id
WHERE NOT EXISTS (SELECT 1 FROM "public"."matches_new" WHERE match_id = m2.match_id);

-- Migrate data from matches_duplicate if not already covered
INSERT INTO "public"."matches_new" (match_id, winner_team_id, match_elo, match_status, blue_team_id, red_team_id)
SELECT 
    md.match_id, 
    md.winner_team_id, 
    md.match_elo, 
    CASE 
        WHEN md.match_status = 0 THEN 'pending'
        WHEN md.match_status = 1 THEN 'in_progress'
        WHEN md.match_status = 2 THEN 'completed'
        ELSE 'unknown'
    END,
    blue.new_id, 
    red.new_id
FROM "public"."matches_duplicate" md
LEFT JOIN game_team_id_mapping blue ON md.blue_team_id = blue.old_id
LEFT JOIN game_team_id_mapping red ON md.red_team_id = red.old_id
WHERE NOT EXISTS (SELECT 1 FROM "public"."matches_new" WHERE match_id = md.match_id);

-- Step 3: Add primary keys and constraints
ALTER TABLE ONLY "public"."tokens" ADD CONSTRAINT "tokens_pkey" PRIMARY KEY ("token_id");
ALTER TABLE ONLY "public"."game_teams" ADD CONSTRAINT "game_teams_pkey" PRIMARY KEY ("game_team_id");
ALTER TABLE ONLY "public"."matches_new" ADD CONSTRAINT "matches_new_pkey" PRIMARY KEY ("match_id");

-- Step 4: Create foreign key constraints
ALTER TABLE ONLY "public"."tokens" 
    ADD CONSTRAINT "tokens_game_team_id_fkey" 
    FOREIGN KEY ("game_team_id") REFERENCES "public"."game_teams"("game_team_id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."tokens" 
    ADD CONSTRAINT "tokens_match_id_fkey" 
    FOREIGN KEY ("match_id") REFERENCES "public"."matches_new"("match_id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."tokens" 
    ADD CONSTRAINT "tokens_user_id_fkey" 
    FOREIGN KEY ("user_id") REFERENCES "public"."users"("user_id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."matches_new" 
    ADD CONSTRAINT "matches_new_blue_team_id_fkey" 
    FOREIGN KEY ("blue_team_id") REFERENCES "public"."game_teams"("game_team_id");

ALTER TABLE ONLY "public"."matches_new" 
    ADD CONSTRAINT "matches_new_red_team_id_fkey" 
    FOREIGN KEY ("red_team_id") REFERENCES "public"."game_teams"("game_team_id");

-- Step 5: Create function for token management
CREATE OR REPLACE FUNCTION "public"."delete_expired_tokens"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
  UPDATE public.tokens SET is_active = false WHERE expires_at < now();
  return new;
end;
$$;

-- Create a trigger to run this function periodically
DROP TRIGGER IF EXISTS delete_expired_tokens_trigger ON public.tokens;
CREATE TRIGGER delete_expired_tokens_trigger
AFTER INSERT ON public.tokens
EXECUTE FUNCTION public.delete_expired_tokens();

-- Step 6: Set permissions and grants
ALTER TABLE "public"."tokens" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."game_teams" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."matches_new" ENABLE ROW LEVEL SECURITY;

-- Tokens table grants
GRANT ALL ON TABLE "public"."tokens" TO "anon";
GRANT ALL ON TABLE "public"."tokens" TO "authenticated";
GRANT ALL ON TABLE "public"."tokens" TO "service_role";

-- Game teams table grants
GRANT ALL ON TABLE "public"."game_teams" TO "anon";
GRANT ALL ON TABLE "public"."game_teams" TO "authenticated";
GRANT ALL ON TABLE "public"."game_teams" TO "service_role";

-- Matches table grants
GRANT ALL ON TABLE "public"."matches_new" TO "anon";
GRANT ALL ON TABLE "public"."matches_new" TO "authenticated";
GRANT ALL ON TABLE "public"."matches_new" TO "service_role";

-- Step 7: Drop old tables and rename new tables
DROP TABLE IF EXISTS "public"."active_tokens" CASCADE;
DROP TABLE IF EXISTS "public"."active_tokens2" CASCADE;
DROP TABLE IF EXISTS "public"."blockwarriors_tokens" CASCADE;
DROP TABLE IF EXISTS "public"."game_teams2" CASCADE;
DROP TABLE IF EXISTS "public"."matches" CASCADE;
DROP TABLE IF EXISTS "public"."matches2" CASCADE;
DROP TABLE IF EXISTS "public"."matches_duplicate" CASCADE;

-- Rename the new matches table to replace the old one
ALTER TABLE "public"."matches_new" RENAME TO "matches";

-- Update constraints to match the new table name
ALTER TABLE "public"."matches" RENAME CONSTRAINT "matches_new_pkey" TO "matches_pkey";
ALTER TABLE "public"."matches" RENAME CONSTRAINT "matches_new_blue_team_id_fkey" TO "matches_blue_team_id_fkey";
ALTER TABLE "public"."matches" RENAME CONSTRAINT "matches_new_red_team_id_fkey" TO "matches_red_team_id_fkey";

-- Add documentation
COMMENT ON TABLE "public"."tokens" IS 'Unified tokens table that replaces active_tokens, active_tokens2, and blockwarriors_tokens';
COMMENT ON TABLE "public"."game_teams" IS 'Replaces game_teams2';
COMMENT ON TABLE "public"."matches" IS 'Unified matches table that replaces matches, matches2, and matches_duplicate';