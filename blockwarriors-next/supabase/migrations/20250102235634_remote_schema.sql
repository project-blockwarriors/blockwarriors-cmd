SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;
CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";
COMMENT ON SCHEMA "public" IS 'standard public schema';
CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";
CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";
CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";
CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$
begin
  insert into public.users (user_id, email)
  values (new.id, new.raw_user_meta_data ->> 'email');
  return new;
end;
$$;
ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";
SET default_tablespace = '';
SET default_table_access_method = "heap";
CREATE TABLE IF NOT EXISTS "public"."active_tokens" (
    "token" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "match_id" bigint,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"())
);
ALTER TABLE "public"."active_tokens" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."matches" (
    "match_id" bigint NOT NULL,
    "winner_team_id" integer,
    "match_elo" integer,
    "match_status" integer,
    "blue_team_id" integer,
    "red_team_id" integer
);
ALTER TABLE "public"."matches" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."matches_duplicate" (
    "match_id" bigint NOT NULL,
    "winner_team_id" integer,
    "match_elo" integer,
    "match_status" integer,
    "blue_team_id" integer,
    "red_team_id" integer
);
ALTER TABLE "public"."matches_duplicate" OWNER TO "postgres";
COMMENT ON TABLE "public"."matches_duplicate" IS 'This is a duplicate of matches';
ALTER TABLE "public"."matches_duplicate" ALTER COLUMN "match_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."matches_duplicate_match_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);
ALTER TABLE "public"."matches" ALTER COLUMN "match_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."matches_match_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);
CREATE TABLE IF NOT EXISTS "public"."teams" (
    "id" integer NOT NULL,
    "team_name" "text" NOT NULL,
    "description" "text",
    "created_at" timestamp without time zone DEFAULT "now"()
);
ALTER TABLE "public"."teams" OWNER TO "postgres";
CREATE SEQUENCE IF NOT EXISTS "public"."teams_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER TABLE "public"."teams_id_seq" OWNER TO "postgres";
ALTER SEQUENCE "public"."teams_id_seq" OWNED BY "public"."teams"."id";
CREATE TABLE IF NOT EXISTS "public"."users" (
    "user_name" "text",
    "email" "text" NOT NULL,
    "institution" "text",
    "geographic_location" "text",
    "user_id" "uuid" NOT NULL,
    "created_at" timestamp without time zone DEFAULT "now"(),
    "team_id" integer
);
ALTER TABLE "public"."users" OWNER TO "postgres";
COMMENT ON COLUMN "public"."users"."team_id" IS 'User''s Team';
ALTER TABLE ONLY "public"."teams" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."teams_id_seq"'::"regclass");
ALTER TABLE ONLY "public"."active_tokens"
    ADD CONSTRAINT "active_tokens_pkey" PRIMARY KEY ("token");
ALTER TABLE ONLY "public"."matches_duplicate"
    ADD CONSTRAINT "matches_duplicate_pkey" PRIMARY KEY ("match_id");
ALTER TABLE ONLY "public"."matches"
    ADD CONSTRAINT "matches_pkey" PRIMARY KEY ("match_id");
ALTER TABLE ONLY "public"."teams"
    ADD CONSTRAINT "teams_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."teams"
    ADD CONSTRAINT "teams_team_name_key" UNIQUE ("team_name");
ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_email_key" UNIQUE ("email");
ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("user_id");
ALTER TABLE ONLY "public"."active_tokens"
    ADD CONSTRAINT "active_tokens_match_id_fkey" FOREIGN KEY ("match_id") REFERENCES "public"."matches"("match_id");
ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_team_id_fkey" FOREIGN KEY ("team_id") REFERENCES "public"."teams"("id") ON UPDATE CASCADE;
ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;
CREATE POLICY "Allow select for authenticated users" ON "public"."users" FOR SELECT USING ((("auth"."role"() = 'authenticated'::"text") AND ("user_id" = "auth"."uid"())));
ALTER TABLE "public"."matches_duplicate" ENABLE ROW LEVEL SECURITY;
ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";
GRANT ALL ON TABLE "public"."active_tokens" TO "anon";
GRANT ALL ON TABLE "public"."active_tokens" TO "authenticated";
GRANT ALL ON TABLE "public"."active_tokens" TO "service_role";
GRANT ALL ON TABLE "public"."matches" TO "anon";
GRANT ALL ON TABLE "public"."matches" TO "authenticated";
GRANT ALL ON TABLE "public"."matches" TO "service_role";
GRANT ALL ON TABLE "public"."matches_duplicate" TO "anon";
GRANT ALL ON TABLE "public"."matches_duplicate" TO "authenticated";
GRANT ALL ON TABLE "public"."matches_duplicate" TO "service_role";
GRANT ALL ON SEQUENCE "public"."matches_duplicate_match_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."matches_duplicate_match_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."matches_duplicate_match_id_seq" TO "service_role";
GRANT ALL ON SEQUENCE "public"."matches_match_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."matches_match_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."matches_match_id_seq" TO "service_role";
GRANT ALL ON TABLE "public"."teams" TO "anon";
GRANT ALL ON TABLE "public"."teams" TO "authenticated";
GRANT ALL ON TABLE "public"."teams" TO "service_role";
GRANT ALL ON SEQUENCE "public"."teams_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."teams_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."teams_id_seq" TO "service_role";
GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";
RESET ALL;
