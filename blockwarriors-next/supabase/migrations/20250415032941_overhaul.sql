create sequence "public"."blockwarriors_tokens_id_seq";

create sequence "public"."teams_id_seq";

create table "public"."active_tokens" (
    "token" uuid not null default uuid_generate_v4(),
    "match_id" bigint,
    "created_at" timestamp with time zone default timezone('utc'::text, now()),
    "expires_at" timestamp with time zone default (now() + '00:05:00'::interval)
);


create table "public"."active_tokens2" (
    "token" uuid not null default uuid_generate_v4(),
    "user_id" uuid,
    "bot_id" integer generated always as identity not null,
    "match_id" bigint,
    "game_team_id" bigint,
    "created_at" timestamp with time zone default now(),
    "expires_at" timestamp with time zone default (now() + '00:15:00'::interval)
);


create table "public"."blockwarriors_tokens" (
    "id" uuid not null default uuid_generate_v4(),
    "user_id" uuid not null,
    "token" text not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."blockwarriors_tokens" enable row level security;

create table "public"."game_teams2" (
    "game_team_id" bigint generated always as identity not null,
    "bots" integer[] not null,
    "created_at" timestamp with time zone default now()
);


create table "public"."matches" (
    "match_id" bigint generated by default as identity not null,
    "winner_team_id" integer,
    "match_elo" integer,
    "match_status" integer,
    "blue_team_id" integer,
    "red_team_id" integer,
    "mode" text default ''::text
);


create table "public"."matches2" (
    "match_id" bigint generated always as identity not null,
    "match_type" text not null,
    "match_status" text default 'pending'::text,
    "red_team_id" bigint,
    "blue_team_id" bigint,
    "created_at" timestamp with time zone default now(),
    "expires_at" timestamp with time zone default (now() + '00:15:00'::interval)
);


create table "public"."matches_duplicate" (
    "match_id" bigint generated by default as identity not null,
    "winner_team_id" integer,
    "match_elo" integer,
    "match_status" integer,
    "blue_team_id" integer,
    "red_team_id" integer
);


alter table "public"."matches_duplicate" enable row level security;

create table "public"."settings" (
    "id" uuid not null default gen_random_uuid(),
    "start_tournament" boolean not null default false,
    "show_banner" boolean not null default false,
    "banner_text_content" text,
    "banner_button_content" text,
    "created_at" timestamp with time zone not null default timezone('utc'::text, now()),
    "updated_at" timestamp with time zone not null default timezone('utc'::text, now())
);


create table "public"."teams" (
    "id" integer not null default nextval('teams_id_seq'::regclass),
    "team_name" text not null,
    "description" text,
    "created_at" timestamp without time zone default now(),
    "leader_id" uuid,
    "team_elo" integer not null default 0,
    "team_wins" integer not null default 0,
    "team_losses" integer not null default 0,
    "time_zone" text
);


alter table "public"."teams" enable row level security;

create table "public"."users" (
    "user_id" uuid not null,
    "first_name" text,
    "last_name" text,
    "email" text,
    "institution" text,
    "geographic_location" text,
    "created_at" timestamp with time zone not null default timezone('utc'::text, now()),
    "team_id" bigint
);


alter table "public"."users" enable row level security;

alter sequence "public"."blockwarriors_tokens_id_seq" owned by "public"."blockwarriors_tokens"."id";

alter sequence "public"."teams_id_seq" owned by "public"."teams"."id";

CREATE UNIQUE INDEX active_tokens_pkey ON public.active_tokens USING btree (token);

CREATE UNIQUE INDEX active_tokens_pkey2 ON public.active_tokens2 USING btree (token);

CREATE UNIQUE INDEX blockwarriors_tokens_pkey ON public.blockwarriors_tokens USING btree (id);

CREATE UNIQUE INDEX blockwarriors_tokens_token_key ON public.blockwarriors_tokens USING btree (token);

CREATE UNIQUE INDEX game_teams2_pkey ON public.game_teams2 USING btree (game_team_id);

CREATE UNIQUE INDEX matches2_pkey ON public.matches2 USING btree (match_id);

CREATE UNIQUE INDEX matches_duplicate_pkey ON public.matches_duplicate USING btree (match_id);

CREATE UNIQUE INDEX matches_pkey ON public.matches USING btree (match_id);

CREATE UNIQUE INDEX settings_pkey ON public.settings USING btree (id);

CREATE UNIQUE INDEX teams_pkey ON public.teams USING btree (id);

CREATE UNIQUE INDEX teams_team_name_key ON public.teams USING btree (team_name);

CREATE UNIQUE INDEX users_email_key ON public.users USING btree (email);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (user_id);

CREATE INDEX users_team_id_idx ON public.users USING btree (team_id);

alter table "public"."active_tokens" add constraint "active_tokens_pkey" PRIMARY KEY using index "active_tokens_pkey";

alter table "public"."active_tokens2" add constraint "active_tokens_pkey2" PRIMARY KEY using index "active_tokens_pkey2";

alter table "public"."blockwarriors_tokens" add constraint "blockwarriors_tokens_pkey" PRIMARY KEY using index "blockwarriors_tokens_pkey";

alter table "public"."game_teams2" add constraint "game_teams2_pkey" PRIMARY KEY using index "game_teams2_pkey";

alter table "public"."matches" add constraint "matches_pkey" PRIMARY KEY using index "matches_pkey";

alter table "public"."matches2" add constraint "matches2_pkey" PRIMARY KEY using index "matches2_pkey";

alter table "public"."matches_duplicate" add constraint "matches_duplicate_pkey" PRIMARY KEY using index "matches_duplicate_pkey";

alter table "public"."settings" add constraint "settings_pkey" PRIMARY KEY using index "settings_pkey";

alter table "public"."teams" add constraint "teams_pkey" PRIMARY KEY using index "teams_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."active_tokens" add constraint "active_tokens_match_id_fkey" FOREIGN KEY (match_id) REFERENCES matches(match_id) not valid;

alter table "public"."active_tokens" validate constraint "active_tokens_match_id_fkey";

alter table "public"."active_tokens2" add constraint "active_tokens2_game_team_id_fkey" FOREIGN KEY (game_team_id) REFERENCES game_teams2(game_team_id) ON DELETE CASCADE not valid;

alter table "public"."active_tokens2" validate constraint "active_tokens2_game_team_id_fkey";

alter table "public"."active_tokens2" add constraint "active_tokens2_match_id_fkey" FOREIGN KEY (match_id) REFERENCES matches2(match_id) ON DELETE CASCADE not valid;

alter table "public"."active_tokens2" validate constraint "active_tokens2_match_id_fkey";

alter table "public"."active_tokens2" add constraint "active_tokens2_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE not valid;

alter table "public"."active_tokens2" validate constraint "active_tokens2_user_id_fkey";

alter table "public"."blockwarriors_tokens" add constraint "blockwarriors_tokens_token_key" UNIQUE using index "blockwarriors_tokens_token_key";

alter table "public"."blockwarriors_tokens" add constraint "blockwarriors_tokens_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE not valid;

alter table "public"."blockwarriors_tokens" validate constraint "blockwarriors_tokens_user_id_fkey";

alter table "public"."matches2" add constraint "matches2_blue_team_id_fkey" FOREIGN KEY (blue_team_id) REFERENCES game_teams2(game_team_id) not valid;

alter table "public"."matches2" validate constraint "matches2_blue_team_id_fkey";

alter table "public"."matches2" add constraint "matches2_red_team_id_fkey" FOREIGN KEY (red_team_id) REFERENCES game_teams2(game_team_id) not valid;

alter table "public"."matches2" validate constraint "matches2_red_team_id_fkey";

alter table "public"."teams" add constraint "teams_leader_id_fkey" FOREIGN KEY (leader_id) REFERENCES auth.users(id) not valid;

alter table "public"."teams" validate constraint "teams_leader_id_fkey";

alter table "public"."teams" add constraint "teams_team_name_key" UNIQUE using index "teams_team_name_key";

alter table "public"."users" add constraint "users_email_key" UNIQUE using index "users_email_key";

alter table "public"."users" add constraint "users_team_id_fkey" FOREIGN KEY (team_id) REFERENCES teams(id) not valid;

alter table "public"."users" validate constraint "users_team_id_fkey";

alter table "public"."users" add constraint "users_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."users" validate constraint "users_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.delete_expired_records()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    -- Delete expired tokens
    DELETE FROM active_tokens2
    WHERE expires_at < NOW();

    -- Delete matches that have expired and are still pending
    DELETE FROM matches2
    WHERE expires_at < NOW() AND status = 'pending';
    
    RETURN NULL;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.disband_team(team_id_param bigint, leader_id_param uuid)
 RETURNS void
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  -- Verify the user is still the team leader
  if not exists (
    select 1 from public.teams 
    where id = team_id_param 
    and leader_id = leader_id_param
  ) then
    raise exception 'Only the team leader can disband the team';
  end if;

  -- Start transaction
  begin
    -- Remove team_id from all team members
    update public.users
    set team_id = null
    where team_id = team_id_param;

    -- Delete the team
    delete from public.teams
    where id = team_id_param;

    -- If any of the above fails, the entire transaction will be rolled back
  end;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.get_all_teams_with_members()
 RETURNS TABLE(id integer, team_name text, leader_id uuid, team_elo integer, team_wins integer, team_losses integer, members jsonb)
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
BEGIN
  RETURN QUERY
  SELECT 
    t.id,
    t.team_name,
    t.leader_id,
    t.team_elo,
    t.team_wins,
    t.team_losses,
    COALESCE(
      jsonb_agg(
        jsonb_build_object(
          'first_name', u.first_name,
          'last_name', u.last_name,
          'user_id', u.user_id
        )
      ) FILTER (WHERE u.first_name IS NOT NULL),
      '[]'::jsonb
    ) as members
  FROM teams t
  LEFT JOIN users u ON u.team_id = t.id
  GROUP BY t.id, t.team_name, t.leader_id;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
BEGIN
    INSERT INTO public.users (
        user_id,
        first_name,
        last_name,
        email
    ) VALUES (
        new.id,
        COALESCE(split_part(jsonb_extract_path_text(new.raw_user_meta_data, 'full_name'), ' ', 1), NULL),
        COALESCE(split_part(jsonb_extract_path_text(new.raw_user_meta_data, 'full_name'), ' ', 2), NULL),
        new.email
    );
    RETURN new;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_last_access_time()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    NEW.last_access_time = NOW();
    RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_modified_column()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    NEW.updated_at = now();
    RETURN NEW; 
END;
$function$
;

grant delete on table "public"."active_tokens" to "anon";

grant insert on table "public"."active_tokens" to "anon";

grant references on table "public"."active_tokens" to "anon";

grant select on table "public"."active_tokens" to "anon";

grant trigger on table "public"."active_tokens" to "anon";

grant truncate on table "public"."active_tokens" to "anon";

grant update on table "public"."active_tokens" to "anon";

grant delete on table "public"."active_tokens" to "authenticated";

grant insert on table "public"."active_tokens" to "authenticated";

grant references on table "public"."active_tokens" to "authenticated";

grant select on table "public"."active_tokens" to "authenticated";

grant trigger on table "public"."active_tokens" to "authenticated";

grant truncate on table "public"."active_tokens" to "authenticated";

grant update on table "public"."active_tokens" to "authenticated";

grant delete on table "public"."active_tokens" to "service_role";

grant insert on table "public"."active_tokens" to "service_role";

grant references on table "public"."active_tokens" to "service_role";

grant select on table "public"."active_tokens" to "service_role";

grant trigger on table "public"."active_tokens" to "service_role";

grant truncate on table "public"."active_tokens" to "service_role";

grant update on table "public"."active_tokens" to "service_role";

grant delete on table "public"."active_tokens2" to "anon";

grant insert on table "public"."active_tokens2" to "anon";

grant references on table "public"."active_tokens2" to "anon";

grant select on table "public"."active_tokens2" to "anon";

grant trigger on table "public"."active_tokens2" to "anon";

grant truncate on table "public"."active_tokens2" to "anon";

grant update on table "public"."active_tokens2" to "anon";

grant delete on table "public"."active_tokens2" to "authenticated";

grant insert on table "public"."active_tokens2" to "authenticated";

grant references on table "public"."active_tokens2" to "authenticated";

grant select on table "public"."active_tokens2" to "authenticated";

grant trigger on table "public"."active_tokens2" to "authenticated";

grant truncate on table "public"."active_tokens2" to "authenticated";

grant update on table "public"."active_tokens2" to "authenticated";

grant delete on table "public"."active_tokens2" to "service_role";

grant insert on table "public"."active_tokens2" to "service_role";

grant references on table "public"."active_tokens2" to "service_role";

grant select on table "public"."active_tokens2" to "service_role";

grant trigger on table "public"."active_tokens2" to "service_role";

grant truncate on table "public"."active_tokens2" to "service_role";

grant update on table "public"."active_tokens2" to "service_role";

grant delete on table "public"."blockwarriors_tokens" to "anon";

grant insert on table "public"."blockwarriors_tokens" to "anon";

grant references on table "public"."blockwarriors_tokens" to "anon";

grant select on table "public"."blockwarriors_tokens" to "anon";

grant trigger on table "public"."blockwarriors_tokens" to "anon";

grant truncate on table "public"."blockwarriors_tokens" to "anon";

grant update on table "public"."blockwarriors_tokens" to "anon";

grant delete on table "public"."blockwarriors_tokens" to "authenticated";

grant insert on table "public"."blockwarriors_tokens" to "authenticated";

grant references on table "public"."blockwarriors_tokens" to "authenticated";

grant select on table "public"."blockwarriors_tokens" to "authenticated";

grant trigger on table "public"."blockwarriors_tokens" to "authenticated";

grant truncate on table "public"."blockwarriors_tokens" to "authenticated";

grant update on table "public"."blockwarriors_tokens" to "authenticated";

grant delete on table "public"."blockwarriors_tokens" to "service_role";

grant insert on table "public"."blockwarriors_tokens" to "service_role";

grant references on table "public"."blockwarriors_tokens" to "service_role";

grant select on table "public"."blockwarriors_tokens" to "service_role";

grant trigger on table "public"."blockwarriors_tokens" to "service_role";

grant truncate on table "public"."blockwarriors_tokens" to "service_role";

grant update on table "public"."blockwarriors_tokens" to "service_role";

grant delete on table "public"."game_teams2" to "anon";

grant insert on table "public"."game_teams2" to "anon";

grant references on table "public"."game_teams2" to "anon";

grant select on table "public"."game_teams2" to "anon";

grant trigger on table "public"."game_teams2" to "anon";

grant truncate on table "public"."game_teams2" to "anon";

grant update on table "public"."game_teams2" to "anon";

grant delete on table "public"."game_teams2" to "authenticated";

grant insert on table "public"."game_teams2" to "authenticated";

grant references on table "public"."game_teams2" to "authenticated";

grant select on table "public"."game_teams2" to "authenticated";

grant trigger on table "public"."game_teams2" to "authenticated";

grant truncate on table "public"."game_teams2" to "authenticated";

grant update on table "public"."game_teams2" to "authenticated";

grant delete on table "public"."game_teams2" to "service_role";

grant insert on table "public"."game_teams2" to "service_role";

grant references on table "public"."game_teams2" to "service_role";

grant select on table "public"."game_teams2" to "service_role";

grant trigger on table "public"."game_teams2" to "service_role";

grant truncate on table "public"."game_teams2" to "service_role";

grant update on table "public"."game_teams2" to "service_role";

grant delete on table "public"."matches" to "anon";

grant insert on table "public"."matches" to "anon";

grant references on table "public"."matches" to "anon";

grant select on table "public"."matches" to "anon";

grant trigger on table "public"."matches" to "anon";

grant truncate on table "public"."matches" to "anon";

grant update on table "public"."matches" to "anon";

grant delete on table "public"."matches" to "authenticated";

grant insert on table "public"."matches" to "authenticated";

grant references on table "public"."matches" to "authenticated";

grant select on table "public"."matches" to "authenticated";

grant trigger on table "public"."matches" to "authenticated";

grant truncate on table "public"."matches" to "authenticated";

grant update on table "public"."matches" to "authenticated";

grant delete on table "public"."matches" to "service_role";

grant insert on table "public"."matches" to "service_role";

grant references on table "public"."matches" to "service_role";

grant select on table "public"."matches" to "service_role";

grant trigger on table "public"."matches" to "service_role";

grant truncate on table "public"."matches" to "service_role";

grant update on table "public"."matches" to "service_role";

grant delete on table "public"."matches2" to "anon";

grant insert on table "public"."matches2" to "anon";

grant references on table "public"."matches2" to "anon";

grant select on table "public"."matches2" to "anon";

grant trigger on table "public"."matches2" to "anon";

grant truncate on table "public"."matches2" to "anon";

grant update on table "public"."matches2" to "anon";

grant delete on table "public"."matches2" to "authenticated";

grant insert on table "public"."matches2" to "authenticated";

grant references on table "public"."matches2" to "authenticated";

grant select on table "public"."matches2" to "authenticated";

grant trigger on table "public"."matches2" to "authenticated";

grant truncate on table "public"."matches2" to "authenticated";

grant update on table "public"."matches2" to "authenticated";

grant delete on table "public"."matches2" to "service_role";

grant insert on table "public"."matches2" to "service_role";

grant references on table "public"."matches2" to "service_role";

grant select on table "public"."matches2" to "service_role";

grant trigger on table "public"."matches2" to "service_role";

grant truncate on table "public"."matches2" to "service_role";

grant update on table "public"."matches2" to "service_role";

grant delete on table "public"."matches_duplicate" to "anon";

grant insert on table "public"."matches_duplicate" to "anon";

grant references on table "public"."matches_duplicate" to "anon";

grant select on table "public"."matches_duplicate" to "anon";

grant trigger on table "public"."matches_duplicate" to "anon";

grant truncate on table "public"."matches_duplicate" to "anon";

grant update on table "public"."matches_duplicate" to "anon";

grant delete on table "public"."matches_duplicate" to "authenticated";

grant insert on table "public"."matches_duplicate" to "authenticated";

grant references on table "public"."matches_duplicate" to "authenticated";

grant select on table "public"."matches_duplicate" to "authenticated";

grant trigger on table "public"."matches_duplicate" to "authenticated";

grant truncate on table "public"."matches_duplicate" to "authenticated";

grant update on table "public"."matches_duplicate" to "authenticated";

grant delete on table "public"."matches_duplicate" to "service_role";

grant insert on table "public"."matches_duplicate" to "service_role";

grant references on table "public"."matches_duplicate" to "service_role";

grant select on table "public"."matches_duplicate" to "service_role";

grant trigger on table "public"."matches_duplicate" to "service_role";

grant truncate on table "public"."matches_duplicate" to "service_role";

grant update on table "public"."matches_duplicate" to "service_role";

grant delete on table "public"."settings" to "anon";

grant insert on table "public"."settings" to "anon";

grant references on table "public"."settings" to "anon";

grant select on table "public"."settings" to "anon";

grant trigger on table "public"."settings" to "anon";

grant truncate on table "public"."settings" to "anon";

grant update on table "public"."settings" to "anon";

grant delete on table "public"."settings" to "authenticated";

grant insert on table "public"."settings" to "authenticated";

grant references on table "public"."settings" to "authenticated";

grant select on table "public"."settings" to "authenticated";

grant trigger on table "public"."settings" to "authenticated";

grant truncate on table "public"."settings" to "authenticated";

grant update on table "public"."settings" to "authenticated";

grant delete on table "public"."settings" to "service_role";

grant insert on table "public"."settings" to "service_role";

grant references on table "public"."settings" to "service_role";

grant select on table "public"."settings" to "service_role";

grant trigger on table "public"."settings" to "service_role";

grant truncate on table "public"."settings" to "service_role";

grant update on table "public"."settings" to "service_role";

grant delete on table "public"."teams" to "anon";

grant insert on table "public"."teams" to "anon";

grant references on table "public"."teams" to "anon";

grant select on table "public"."teams" to "anon";

grant trigger on table "public"."teams" to "anon";

grant truncate on table "public"."teams" to "anon";

grant update on table "public"."teams" to "anon";

grant delete on table "public"."teams" to "authenticated";

grant insert on table "public"."teams" to "authenticated";

grant references on table "public"."teams" to "authenticated";

grant select on table "public"."teams" to "authenticated";

grant trigger on table "public"."teams" to "authenticated";

grant truncate on table "public"."teams" to "authenticated";

grant update on table "public"."teams" to "authenticated";

grant delete on table "public"."teams" to "service_role";

grant insert on table "public"."teams" to "service_role";

grant references on table "public"."teams" to "service_role";

grant select on table "public"."teams" to "service_role";

grant trigger on table "public"."teams" to "service_role";

grant truncate on table "public"."teams" to "service_role";

grant update on table "public"."teams" to "service_role";

grant delete on table "public"."users" to "anon";

grant insert on table "public"."users" to "anon";

grant references on table "public"."users" to "anon";

grant select on table "public"."users" to "anon";

grant trigger on table "public"."users" to "anon";

grant truncate on table "public"."users" to "anon";

grant update on table "public"."users" to "anon";

grant delete on table "public"."users" to "authenticated";

grant insert on table "public"."users" to "authenticated";

grant references on table "public"."users" to "authenticated";

grant select on table "public"."users" to "authenticated";

grant trigger on table "public"."users" to "authenticated";

grant truncate on table "public"."users" to "authenticated";

grant update on table "public"."users" to "authenticated";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";

create policy "Enable insert access for all users"
on "public"."blockwarriors_tokens"
as permissive
for insert
to public
with check (true);


create policy "Enable read access for all users"
on "public"."blockwarriors_tokens"
as permissive
for select
to public
using (true);


create policy "Team leaders can update their team"
on "public"."teams"
as permissive
for update
to authenticated
using ((leader_id = auth.uid()));


create policy "Users can create teams"
on "public"."teams"
as permissive
for insert
to authenticated
with check ((leader_id = auth.uid()));


create policy "Users can view all teams"
on "public"."teams"
as permissive
for select
to authenticated
using (true);


create policy "Users can update their own profile"
on "public"."users"
as permissive
for update
to authenticated
using ((user_id = auth.uid()));


create policy "Users can view team members"
on "public"."users"
as permissive
for select
to authenticated
using (((team_id IN ( SELECT teams.id
   FROM teams
  WHERE (teams.leader_id = auth.uid()))) OR (user_id = auth.uid())));


CREATE TRIGGER delete_expired_tokens_trigger AFTER INSERT OR UPDATE ON public.blockwarriors_tokens FOR EACH STATEMENT EXECUTE FUNCTION delete_expired_records();

CREATE TRIGGER set_public_blockwarriors_tokens_updated_at BEFORE UPDATE ON public.blockwarriors_tokens FOR EACH ROW EXECUTE FUNCTION update_modified_column();

CREATE TRIGGER "on_auth_user_created" AFTER INSERT ON "auth"."users" FOR EACH ROW EXECUTE FUNCTION "public"."handle_new_user"();

