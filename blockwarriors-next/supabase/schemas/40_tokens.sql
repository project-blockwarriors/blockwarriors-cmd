-- Update this file to contain consolidated tokens and matches tables

-- Unified tokens table replacing active_tokens, active_tokens2, and blockwarriors_tokens
CREATE TABLE IF NOT EXISTS "public"."tokens" (
    "token_id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "token" "uuid" DEFAULT "extensions"."uuid_generate_v4"(),
    "user_id" "uuid",
    "match_id" bigint,
    "game_team_id" bigint,
    "bot_id" integer,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "expires_at" timestamp with time zone DEFAULT ("now"() + '00:15:00'::interval),
    "is_active" boolean DEFAULT true
);

ALTER TABLE "public"."tokens" OWNER TO "postgres";

COMMENT ON TABLE "public"."tokens" IS 'Unified tokens table that replaces active_tokens, active_tokens2, and blockwarriors_tokens';
COMMENT ON COLUMN "public"."tokens"."expires_at" IS 'Tokens typically expire 15 minutes after creation';

-- Game teams table
CREATE TABLE IF NOT EXISTS "public"."game_teams" (
    "game_team_id" bigint NOT NULL,
    "bots" integer[] NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"()
);

ALTER TABLE "public"."game_teams" OWNER TO "postgres";

ALTER TABLE "public"."game_teams" ALTER COLUMN "game_team_id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "public"."game_teams_game_team_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Unified matches table replacing matches, matches2, and matches_duplicate
CREATE TABLE IF NOT EXISTS "public"."matches" (
    "match_id" bigint NOT NULL,
    "match_type" "text" DEFAULT 'standard',
    "match_status" "text" DEFAULT 'pending',
    "match_elo" integer,
    "winner_team_id" bigint,
    "blue_team_id" bigint,
    "red_team_id" bigint,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "expires_at" timestamp with time zone DEFAULT ("now"() + '00:15:00'::interval),
    "mode" "text" DEFAULT ''::"text"
);

ALTER TABLE "public"."matches" OWNER TO "postgres";

COMMENT ON TABLE "public"."matches" IS 'Unified matches table that replaces matches, matches2, and matches_duplicate';
COMMENT ON COLUMN "public"."matches"."mode" IS 'bedwars, pvp, or ctf';
COMMENT ON COLUMN "public"."matches"."match_type" IS 'Type of match (e.g., standard, tournament)';
COMMENT ON COLUMN "public"."matches"."match_status" IS 'Status of match: pending, in_progress, completed';

ALTER TABLE "public"."matches" ALTER COLUMN "match_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."matches_match_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Settings table
CREATE TABLE IF NOT EXISTS "public"."settings" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "start_tournament" boolean DEFAULT false NOT NULL,
    "show_banner" boolean DEFAULT false NOT NULL,
    "banner_text_content" "text",
    "banner_button_content" "text",
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL
);

ALTER TABLE "public"."settings" OWNER TO "postgres";

-- Primary keys
ALTER TABLE ONLY "public"."tokens" ADD CONSTRAINT "tokens_pkey" PRIMARY KEY ("token_id");
ALTER TABLE ONLY "public"."game_teams" ADD CONSTRAINT "game_teams_pkey" PRIMARY KEY ("game_team_id");
ALTER TABLE ONLY "public"."matches" ADD CONSTRAINT "matches_pkey" PRIMARY KEY ("match_id");
ALTER TABLE ONLY "public"."settings" ADD CONSTRAINT "settings_pkey" PRIMARY KEY ("id");

-- Foreign key constraints
ALTER TABLE ONLY "public"."tokens" ADD CONSTRAINT "tokens_game_team_id_fkey" FOREIGN KEY ("game_team_id") REFERENCES "public"."game_teams"("game_team_id") ON DELETE CASCADE;
ALTER TABLE ONLY "public"."tokens" ADD CONSTRAINT "tokens_match_id_fkey" FOREIGN KEY ("match_id") REFERENCES "public"."matches"("match_id") ON DELETE CASCADE;
ALTER TABLE ONLY "public"."tokens" ADD CONSTRAINT "tokens_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("user_id") ON DELETE CASCADE;
ALTER TABLE ONLY "public"."matches" ADD CONSTRAINT "matches_blue_team_id_fkey" FOREIGN KEY ("blue_team_id") REFERENCES "public"."game_teams"("game_team_id");
ALTER TABLE ONLY "public"."matches" ADD CONSTRAINT "matches_red_team_id_fkey" FOREIGN KEY ("red_team_id") REFERENCES "public"."game_teams"("game_team_id");

-- Function to automatically handle expired tokens
CREATE OR REPLACE FUNCTION "public"."delete_expired_tokens"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
  UPDATE public.tokens SET is_active = false WHERE expires_at < now();
  return new;
end;
$$;

-- Create a trigger to run this function periodically
DROP TRIGGER IF EXISTS delete_expired_tokens_trigger ON public.tokens;
CREATE TRIGGER delete_expired_tokens_trigger
AFTER INSERT ON public.tokens
EXECUTE FUNCTION public.delete_expired_tokens();

-- Row level security
ALTER TABLE "public"."tokens" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."game_teams" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."matches" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."settings" ENABLE ROW LEVEL SECURITY;
