-- Matches table (consolidated from matches, matches2, and matches_duplicate)
CREATE TABLE IF NOT EXISTS "public"."matches" (
    "match_id" bigint NOT NULL,
    "match_type" text DEFAULT 'standard',
    "match_status" text DEFAULT 'pending',
    "match_elo" integer,
    "winner_team_id" bigint,
    "blue_team_id" bigint,
    "red_team_id" bigint,
    "created_at" timestamp with time zone DEFAULT now(),
    "expires_at" timestamp with time zone DEFAULT (now() + '00:15:00'::interval),
    "mode" text DEFAULT ''
);

ALTER TABLE "public"."matches" OWNER TO "postgres";

-- Comments
COMMENT ON TABLE "public"."matches" IS 'Unified matches table that replaces matches, matches2, and matches_duplicate';
COMMENT ON COLUMN "public"."matches"."mode" IS 'bedwars, pvp, or ctf';
COMMENT ON COLUMN "public"."matches"."match_type" IS 'Type of match (e.g., standard, tournament)';
COMMENT ON COLUMN "public"."matches"."match_status" IS 'Status of match: pending, in_progress, completed';

-- Primary key
ALTER TABLE ONLY "public"."matches" ADD CONSTRAINT "matches_pkey" PRIMARY KEY ("match_id");

-- Foreign keys
ALTER TABLE ONLY "public"."matches" ADD CONSTRAINT "matches_blue_team_id_fkey" FOREIGN KEY ("blue_team_id") REFERENCES "public"."game_teams"("game_team_id");
ALTER TABLE ONLY "public"."matches" ADD CONSTRAINT "matches_red_team_id_fkey" FOREIGN KEY ("red_team_id") REFERENCES "public"."game_teams"("game_team_id");

-- Identity sequence
ALTER TABLE "public"."matches" ALTER COLUMN "match_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."matches_match_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Enable RLS
ALTER TABLE "public"."matches" ENABLE ROW LEVEL SECURITY;

-- RLS Policies
-- Allow authenticated users to view all matches
CREATE POLICY "Users can view all matches" ON "public"."matches"
FOR SELECT
USING (auth.role() = 'authenticated' OR auth.role() = 'service_role');

-- Allow authenticated users to insert new matches
CREATE POLICY "Users can create new matches" ON "public"."matches"
FOR INSERT
WITH CHECK (auth.role() = 'authenticated' OR auth.role() = 'service_role');

-- Allow authenticated users to update matches they created
CREATE POLICY "Users can update matches" ON "public"."matches"
FOR UPDATE
USING (auth.role() = 'authenticated' OR auth.role() = 'service_role');

-- Allow authenticated users to delete matches they created
CREATE POLICY "Users can delete matches" ON "public"."matches"
FOR DELETE
USING (auth.role() = 'authenticated' OR auth.role() = 'service_role');

-- Grant access to anon and authenticated roles
GRANT ALL ON TABLE "public"."matches" TO "anon";
GRANT ALL ON TABLE "public"."matches" TO "authenticated";
GRANT ALL ON TABLE "public"."matches" TO "service_role";
